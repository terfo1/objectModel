import os
import json
import pika
import traceback
from dotenv import load_dotenv
from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.video.io.ImageSequenceClip import ImageSequenceClip
from ultralytics import YOLO

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST")
INPUT_QUEUE = os.getenv("INPUT_QUEUE")
OUTPUT_QUEUE = os.getenv("OUTPUT_QUEUE")
YOLO_MODEL_PATH = os.getenv("YOLO_MODEL_PATH")
RABBITMQ_PORT = int(os.getenv("RABBITMQ_PORT", 5672))
RABBITMQ_USER = os.getenv("RABBITMQ_USER")
RABBITMQ_PASS = os.getenv("RABBITMQ_PASS")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑
model = YOLO(YOLO_MODEL_PATH)


def buffer_to_video_file(video_buffer):
    path = "temp_input.mp4"
    with open(path, "wb") as f:
        f.write(video_buffer)
    return path


def video_file_to_buffer(path):
    with open(path, "rb") as f:
        return f.read()


def process_video(video_buffer):
    print(f"‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ YOLO –ø–æ –ø—É—Ç–∏: {YOLO_MODEL_PATH}")
    path = buffer_to_video_file(video_buffer)
    clip = VideoFileClip(path)
    fps = clip.fps
    detections, output_frames = [], []

    for frame_id, frame in enumerate(clip.iter_frames(fps=fps, dtype="uint8")):
        results = model(frame)
        annotated_frame = results[0].plot()
        output_frames.append(annotated_frame)

        for r in results:
            if r.boxes:
                time = round(frame_id / fps, 2)
                detected = [model.names[int(b.cls)] for b in r.boxes]
                detections.append({
                    "time": time,
                    "objects": list(set(detected))
                })

    annotated_path = "temp_annotated.mp4"
    ImageSequenceClip(output_frames, fps=fps).write_videofile(annotated_path, codec="libx264", logger=None)

    return video_file_to_buffer(annotated_path), json.dumps({"detections": detections}).encode()


def callback(ch, method, properties, body):
    try:
        data = json.loads(body)
        video_id = data.get("videoId")
        video_data = data.get("videoData", {}).get("data")

        if not video_id or not video_data:
            print("‚ÄºÔ∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç videoId –∏–ª–∏ videoData")
            return

        print(f"[>] –í–∏–¥–µ–æ {video_id} –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        video_buffer = bytes(video_data)
        processed_video, report = process_video(video_buffer)

        result = {
            "videoId": video_id,
            "processedVideo": {"type": "Buffer", "data": list(processed_video)},
            "report": report.decode()
        }

        # –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)
        connection = pika.BlockingConnection(pika.ConnectionParameters(
            host=RABBITMQ_HOST,
            port=RABBITMQ_PORT,
            credentials=credentials
        ))
        channel = connection.channel()
        channel.queue_declare(queue=OUTPUT_QUEUE, durable=True)
        channel.basic_publish(exchange="", routing_key=OUTPUT_QUEUE, body=json.dumps(result))
        connection.close()

        print(f"[‚úì] –í–∏–¥–µ–æ {video_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å {OUTPUT_QUEUE}")
    except Exception as e:
        print("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –≤ callback:", e)


def start_consumer():
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ consumer...")
        print(f"‚Üí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ: {RABBITMQ_HOST}:{RABBITMQ_PORT} –∫–∞–∫ {RABBITMQ_USER}")

        credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)
        parameters = pika.ConnectionParameters(
            host=RABBITMQ_HOST,
            port=RABBITMQ_PORT,
            credentials=credentials
        )

        connection = pika.BlockingConnection(parameters)
        channel = connection.channel()
        channel.queue_declare(queue=INPUT_QUEUE, durable=True)

        print(f"‚Üí –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {INPUT_QUEUE}")
        channel.basic_consume(queue=INPUT_QUEUE, on_message_callback=callback, auto_ack=True)
        channel.start_consuming()

    except Exception as e:
        print("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –≤ start_consumer:", e)
        traceback.print_exc()

if __name__ == "__main__":
    start_consumer()

"""from ultralytics import YOLO
model=YOLO("C:/Users/LEGION/Desktop/–î–∏–ø–ª–æ–º/Test/runs/detect/final_with_negatives/weights/best.pt")
model.predict(source="C:/Users/LEGION/Downloads/South African _Revolver_ Grenade Launcher.mp4",save=True)"""